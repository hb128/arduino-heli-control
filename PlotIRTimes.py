import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import numpy as np

#throttle

raw = [[920,725, 300,255, 300,255, 300,270, 915,215, 350,205, 920,220, 345,210, 345,210, 925,715, 925,215, 920,215, 345,210, 925,220, 915,215, 345,215, 925,220, 350,210, 345,715, 295,780, 925,205, 920,210, 345],
       [925,725, 295,265, 295,265, 305,265, 920,210, 345,210, 925,215, 350,210, 915,720, 920,215, 350,215, 920,210, 345,210, 915,225, 920,210, 345,210, 915,225, 350,205, 350,715, 295,775, 300,760, 925,715, 925],
       [920,725, 300,255, 300,255, 300,265, 920,215, 350,205, 920,220, 345,715, 295,770, 925,715, 295,270, 925,210, 350,210, 915,225, 920,210, 350,210, 915,225, 350,205, 350,710, 300,270, 925,710, 925,205, 920],
       [920,725, 295,265, 300,255, 300,265, 920,215, 340,215, 920,220, 870,265, 870,765, 295,770, 300,265, 925,205, 350,205, 920,220, 865,265, 350,210, 870,270, 345,215, 345,720, 300,775, 295,770, 300,255, 925],
       [925,720, 300,260, 295,260, 295,270, 920,210, 345,715, 295,775, 300,255, 300,260, 295,765, 920,225, 875,255, 350,715, 295,270, 920,210, 345,210, 865,275, 350,205, 350,715, 295,775, 920,215, 340,215, 350],
       [895,920, 310,320, 365,270, 365,265, 945,270, 365,265, 945,265, 365,265, 945,265, 945,870, 305,325, 895,320, 305,325, 900,315, 895,320, 305,325, 895,320, 305,325, 310,920, 310,920, 310,320, 920,295, 890]] # last fake
'''
CAA BAB AABD BAB BABAAC DBA
CAA BAB ABDA BAB BABAAC CDD
CAA BAB ACDC BAB BABAAC BDB
CAA BAB BBCC BAB BABAAC CCB
CAA BAC CAAD BAC BABAAC DAA
'''
#throttle mittel, rechts links
'''
raw = [[925,720, 300,260, 295,260, 350,215, 350,205, 350,210, 350,220, 350,715, 295,265, 920,215, 875,270, 870,265, 350,210, 870,270, 875,260, 345,210, 865,275, 350,210, 350,715, 295,275, 300,255, 870,765, 920],
       [925,725, 305,255, 300,255, 345,220, 925,210, 350,210, 350,220, 345,715, 295,265, 920,215, 875,265, 870,265, 350,205, 870,270, 875,255, 345,210, 865,275, 350,210, 350,715, 295,270, 920,210, 865,770, 925],
       [930,720, 300,260, 295,260, 355,720, 300,260, 295,765, 920,225, 350,710, 300,260, 875,260, 865,275, 870,260, 345,210, 875,270, 870,265, 350,205, 870,270, 345,215, 350,710, 300,775, 305,255, 870,265, 350]]
CAA AAA ACBB BAB BABAAC ABD
CAA BAA ACBB BAB BABAAC BBD
CAA CAD ACBB BAB BABAAC CBA
'''

# throtthle mittel, vorwärts -> rückwärts
'''
raw = [[925,725, 295,265, 300,255, 350,220, 870,265, 350,205, 350,220, 350,715, 295,265, 875,260, 345,225, 350,205, 350,210, 350,220, 870,265, 350,205, 870,270, 345,215, 350,710, 300,270, 295,260, 875,765, 920],
       [920,730, 300,255, 300,260, 345,220, 875,255, 345,210, 345,220, 345,720, 300,255, 870,265, 350,215, 870,260, 340,215, 875,270, 865,265, 350,210, 870,275, 350,205, 350,715, 295,270, 875,260, 875,765, 295],
       [920,730, 300,285, 275,260, 295,270, 925,210, 300,260, 300,270, 300,765, 300,285, 900,205, 300,770, 295,265, 295,770, 925,220, 915,215, 295,265, 920,220, 295,260, 295,770, 300,775, 300,285, 900,205, 300]]
CAA BAA ACBA AAA BABAAC ABD
CAA BAA ACBA BAB BABAAC BBC
CAA BAA ACBA CAD BABAAC CBA
'''

# Trim, rechts -> links
'''

raw = [[920,225, 345,720, 300,260, 295,270, 875,260, 345,210, 345,220, 345,720, 300,260, 875,255, 350,220, 870,265, 350,210, 870,270, 875,260, 345,210, 875,265, 345,210, 345,715, 305,800, 895,720, 915,720, 300],
       [920,220, 875,760, 295,260, 875,270, 875,260, 345,210, 345,220, 345,715, 300,255, 870,265, 350,215, 870,265, 350,205, 870,270, 875,255, 345,210, 865,275, 350,210, 345,715, 305,800, 270,795, 900,715, 875],
       [925,725, 305,760, 295,795, 900,220, 870,265, 350,210, 350,220, 345,715, 295,265, 870,265, 350,215, 870,260, 345,215, 875,270, 865,265, 350,210, 870,275, 350,205, 350,715, 295,270, 875,765, 870,265, 870]]
ACA BAA ACBA BAB BABAAC DDC
BCB BAA ACBA BAB BABAAC CDD
CCD BAA ACBA BAB BABAAC BDB
'''

# Keine Taste, Linke Taste, Rechte Taste, Beide Tasten
'''
raw = [[925,220, 870,770, 295,260, 920,220, 925,210, 350,210, 345,220, 345,715, 305,255, 920,215, 350,215, 920,215, 350,205, 920,220, 925,210, 345,210, 925,220, 350,210, 345,715, 300,775, 295,770, 925,715, 920],
       [925,220, 870,770, 300,260, 355,215, 870,260, 345,215, 340,225, 355,710, 300,260, 875,260, 345,220, 865,265, 350,210, 345,220, 870,265, 350,210, 870,780, 300,260, 355,710, 300,270, 295,765, 930,710, 925],
       [920,220, 875,765, 295,265, 350,220, 915,215, 350,205, 350,220, 350,715, 295,265, 920,215, 350,215, 920,215, 345,215, 920,220, 925,210, 350,210, 915,225, 920,215, 350,710, 300,775, 930,715, 925,715, 305],
       [925,220, 925,715, 295,260, 355,215, 920,210, 345,215, 355,215, 350,740, 270,260, 920,210, 345,220, 925,210, 345,210, 345,220, 925,210, 345,210, 925,750, 895,210, 345,720, 300,265, 925,715, 925,745, 905]]

BCB BAA ACBA BAB BAB A AC CDD
BCA BAA ACBA BAA BAB C AC ADD
BCA BAA ACBA BAB BAB B AC DDC
BCA BAA ACBA BAA BAB D AC BDD
'''

# Modeltaste: A,B,C, C mit l Taste
'''
raw = [[925,220, 870,770, 300,260, 875,270, 870,265, 350,210, 870,270, 875,260, 345,210, 345,215, 875,270, 875,255, 345,210, 870,275, 870,260, 340,215, 870,270, 345,215, 355,710, 300,270, 295,765, 300,765, 920],
       [925,220, 870,770, 300,260, 350,215, 870,260, 345,215, 875,265, 870,265, 350,210, 350,210, 345,220, 875,255, 345,210, 345,220, 875,255, 350,210, 870,275, 350,210, 870,265, 870,270, 350,710, 925,210, 870],
       [920,225, 875,765, 295,265, 870,275, 875,260, 345,210, 875,265, 870,265, 350,205, 350,210, 870,275, 870,260, 345,215, 875,270, 875,255, 345,210, 870,275, 350,715, 295,265, 300,265, 345,210, 345,210, 875],
       [925,215, 920,745, 275,260, 295,270, 920,210, 300,260, 925,220, 925,205, 300,255, 300,255, 300,270, 925,210, 300,260, 925,215, 920,215, 295,265, 920,730, 300,765, 300,255, 300,775, 380,180, 300,260, 925]]
BCB BAB BAAB BAB BABAAC ACD
BCA BAB BAAA BAA BABABB ADB
BCB BAB BAAB BAB BABACA AAB
BCA BAB BAAA BAB BAB CCA CAB
'''
#TRIM R-L THRO FBW ??? BTNS CHS?

y = []
x = []
symbols = []
bitfields = []
bfMap=['00','01', '10', '11']
symbolMap=['A','B','C','D']

for i,iraw in enumerate(raw):
    yval = 1
    xc = 0
    x.append([0,0])
    y.append([0,1])  
    symbol = ""
    bitfield = "" 
    for j,l in enumerate(iraw):
        xc += l
        x[i].append(xc)
        y[i].append(yval)
        yval = not yval
        x[i].append(xc)
        y[i].append(int(yval))
        if j > 0 and j%2==0:
            low = iraw[j-1]
            high = iraw[j]
            if low < 450 and high < 450:
                symbol += 'A'
                bitfield += "00"
            elif low < 450 and high >= 450:
                symbol += 'B'
                bitfield += "01"
            elif low >= 450 and high < 450:
                symbol += 'C'
                bitfield += "10"
            elif low >= 450 and high >= 450:
                symbol += 'D'
                bitfield += "11"
            else:
                print("Error in encoding.")  
    symbols.append(symbol)
    bitfields.append(bitfield)    
    
xmax = max([item[-1] for item in x])
for i, iraw in enumerate(raw):
    x[i].append(xmax)
    y[i].append(0)    

gs = gridspec.GridSpec(len(x),1)
fig = plt.figure()


for i in range(len(raw)):
    s = 6
    e = 10
    #print(symbols[i][s:e])
    sb = bitfields[i][s*2:e*2]
    #print(sb)
    print(int(sb, 2))

# BCA BAB BAAA BAB BABCCA CAB
#TRIM R-L THRO FBW ??? BTNS CHS?

wordsI = [(0,3), (3,6), (6, 10), (10, 13), (13, 16), (16, 19)]    
# Checksum
for i in range(len(raw)):
    print("\n", i)
    s = 19
    e = 22
    #print(symbols[i][s:e])
    sb = bitfields[i][s*2:e*2]
    print(sb)
    #print(int(sb, 2))
    #noOnes = 0
    #for bit in bitfields[i]:
    #    if bit == '1':
    #        noOnes += 1
    #print(noOnes)
    words = []
    for tup in wordsI:
        words.append(int(bitfields[i][tup[0]*2:tup[1]*2],2))
    chks = 0
    for w in words:
       print(bin(w))
       chks ^= w
    print(str(bin(chks))[-6:])
    

for i,l in enumerate(zip(x,y)):
    print(symbols[i])
    print(bitfields[i])
    ax = fig.add_subplot(gs[i])
    zeroline = np.zeros(len(l[0]))
    ax.plot(l[0],l[1])
    ax.fill_between(l[0],l[1],zeroline)
    ax.set_ylabel(str(i), size =16)
    ax.get_yaxis().set_label_coords(-0.1,0.5)
    ax.set_ylim((0, 1.1))
gs.tight_layout(fig)

#plt.show()
